#!/usr/bin/perl -w
use strict;

#
#	Generate test sequences for mhc.pl
#	Written by Joseph Southan
#	
#	Args ./seq_gen.pl [0] [1] [2]
#		[0] 	= Amino Acid length
#		[1]		= Quantity of sequences
#		[2]		= Accurate mode. 0 or 1.
#
#	Requires ../seqs/ and ../seqs/info/ to be created.
#
#	Example Usage: ./seqgen.pl 9 10 1
#	Generates a file of ten 9mers with AAs in correct positions for 
#	random MHC Class I/II molecules ~20% of the time.
#	
#	Warning: Number of actual matches generated by Accurate Mode may
#			 differ from what is found by mhc.pl due to random
#			 chance. Small numbers of sequences (<100) work fine.
#


#Check input
	unless (defined @ARGV) {
		die "No arguments. Example Usage: ./seqgen.pl 9 10 1. See file.\n";
	}
	unless (@ARGV == 3) {
		die "3 arguments please\n";
	}

#Check that accurate mode isnt being called with anything but 9 or 15

	unless (($ARGV[0] == 9 or $ARGV[0] == 15) and $ARGV[2] == 1) {
		if ($ARGV[2] == 0) {
		} else {
			die "Accurate mode can only be 9 or 15\n";
		}
	}
	
#Check seqs/info/ and /seqs/ exists
	unless (-d "../seqs/info/" and -d "../seqs/") {
		die "Output directory ../seqs/ or ../seqs/info does not exist.\n";
	}


#Do the generation

	#Filename
	my $filename_1 = $ARGV[0];
	my $filename_2 = $ARGV[1];
	my $time = time;
	my $filename = "$filename_2\_generated_$filename_1\_mers_$time.txt";
	my $infofile = "info_$filename_2\_generated_$filename_1\_mers_$time.txt";
	
	#"Amino Acids"
	my @AAs = ("A" .. "Z");
	#How random to be for MHC molecules (Do not change)
	my $randomrange = 5;
	#Chance that a match sequence is generated.
	my $range = 6;

#Generation

	#Random Mode (Sequence loading checking / Cleaning checker)

	if ($ARGV[2]==0) {
			open (OUTFILE , ">", "../seqs/$filename") or die "Can't create output file\n";
			print "Creating file \"$filename\" in ../seqs/\n";
			for (my $i = 0; $i < $ARGV[1]; $i++) {
				my $generatedAAs = 0;
				my $randomAA;
				while ($generatedAAs < $ARGV[0]) {
					$randomAA .= $AAs[rand (@AAs)];#http://www.perlmonks.org/?node_id=1870
					$generatedAAs++;
				}
				print OUTFILE $randomAA. "\n";
			}
			close (OUTFILE) or die "Can't close output\n";
			
			
	} elsif ($ARGV[2] == 1) {
	
	#Accurate mode (Some random and some that should match)
	
		open (OUTFILE , ">", "../seqs/acc_$filename") or die "Can't create output file\n";
		print "Creating file \"acc_$filename\" in ../seqs/\n";
		
		#Counters
		my $mhc1_1 = 0;
		my $mhc1_2 = 0;
		my $mhc1_3 = 0;
		my $mhc2_1 = 0;
		my $mhc2_2 = 0;
		my $mhc2_3 = 0;
		my %sequenceMatches;
		
		#Generate a sequence of AAs randomly 
		for (my $i = 0; $i < $ARGV[1]; $i++) {
			
			my $generatedAAs = 0;
			my $randomAA;
			my $randomno = int(rand($range));
			if ($randomno == 1) {
				#Generate a sequence for an MHC match
				my $randomNo2 = int(rand($randomrange));
				if (0 == $randomNo2 or 1 == $randomNo2){
					if (9 == $ARGV[0]){
						$randomAA = GenMHC1_X1A();
						$mhc1_1++;
					} elsif (15 == $ARGV[0]){
						$randomAA = GenMHC2_XX100();
						$mhc2_1++;
					} 
				} elsif (2 == $randomNo2 or 3 == $randomNo2) {
					if (9 == $ARGV[0]){
						$randomAA = GenMHC1_X2A();
						$mhc1_2++;
					} elsif (15 == $ARGV[0]){
						$randomAA = GenMHC2_XX112();
						$mhc2_2++;
					}
				} elsif (4 == $randomNo2 or 5 == $randomNo2) {
					if (9 == $ARGV[0]){
						$randomAA = GenMHC1_X2B();
						$mhc1_3++;
					} elsif (15 == $ARGV[0]){
						$randomAA = GenMHC2_XX200();
						$mhc2_3++;
					}
				} else {
					die ("Can't print line $randomNo2 is out of bounds. DO NOT CHANGE \$randomrange\n");
				}
				
				
			} else {
				while ($generatedAAs < $ARGV[0]) {
					$randomAA .= doNorm();
					$generatedAAs++;
				}
			}
			#Output to the file.
			print OUTFILE "$randomAA\n";

		}
			#Print out some useful info
			open (INFO , ">", "../seqs/info/$infofile") or die "Can't create output file\n";
			print "Info file stored to /seqs/info/$infofile\n";
			if ($ARGV[0] == 9) {
				print INFO "Number of matches to expect:\n";
				print INFO "---Please be aware that numbers may differ to the output of mhc.pl due to random chance.---\n";
				print INFO "Generated $ARGV[1] $ARGV[0]mers.\n";
				print INFO "MHC1 X1A: $mhc1_1 \n";
				print INFO "MHC1 X2A: $mhc1_2 \n";
				print INFO "MHC1 X2B: $mhc1_3 \n";
			} else {
				print INFO "Number of matches to expect:\n";
				print INFO "---Please be aware that numbers may differ to the output of mhc.pl due to random chance.---\n";
				print INFO "Generated $ARGV[1] $ARGV[0]mers.\n";
				print INFO "MHC2 XX100: $mhc2_1 \n";
				print INFO "MHC2 XX112: $mhc2_2 \n";
				print INFO "MHC2 XX200: $mhc2_3 \n";
			}
			close (INFO) or die ("Can't close info output\n");
			close (OUTFILE) or die ("Can't close sequence output\n");
	} else {
		die "No idea.\n";
}


#Subroutines

	sub doNorm {
			my $rollAA = $AAs[rand(@AAs)];#Gen 1 AA http://www.perlmonks.org/?node_id=1870
			return $rollAA;
	}


	sub GenMHC1_X1A {
		# 1 = A G P
		# 3 = N D
		# 6 = F
		# 9 = A G
		my @p1 = qw (A G P);
		my @p3 = qw (N D);
		my $p6 = "F";
		my @p9 = qw (A G);

		my $p1r = $p1[rand(@p1)];
		my $p3r = $p3[rand(@p3)];
		my $p9r = $p9[rand(@p9)];
		my $seq = $p1r.doNorm().$p3r.doNorm().doNorm().$p6.doNorm().doNorm().$p9r;
		return $seq;
	}
	sub GenMHC1_X2A {
		# 1 = A
		# 4 = Y
		# 6 = D L I
		# 9 = G R
		my $p1 = "A";
		my $p4 = "Y";
		my @p6 = qw (D L I);
		my @p9 = qw (G R);
		
		my $p6r = $p6[rand(@p6)];
		my $p9r = $p9[rand(@p9)];
		my $seq = $p1.doNorm().doNorm().$p4.doNorm().$p6r.doNorm().doNorm().$p9r;
		
		return $seq;
	}
	sub GenMHC1_X2B {
		# 1 = A R T
		# 3 = A N
		# 5 = S
		# 9 = A R T
		my @p1 = qw (A R T);
		my @p3 = qw (A N);
		my $p5 = "S";
		my @p9 = qw (A R T);
		
		my $p1r = $p1[rand(@p1)];
		my $p3r = $p3[rand(@p3)];
		my $p9r = $p9[rand(@p9)];
		my $seq = $p1r.doNorm().$p3r.doNorm().$p5.doNorm().doNorm().doNorm().$p9r;
		
		return $seq;
	}

	sub GenMHC2_XX100 {
		# 1 = G
		# 3 = P
		# 6 = R A
		# 9 = A G
		my $p1 = "G";
		my $p3 = "P";
		my @p6 = qw (R A);
		my @p9 = qw (A G);
		
		my $p6r = $p6[rand(@p6)];
		my $p9r = $p9[rand(@p9)];
		my $seq = doNorm().doNorm().doNorm().$p1.doNorm().$p3.doNorm().doNorm().$p6r.doNorm().doNorm().$p9r.doNorm().doNorm().doNorm();
		
		return $seq;
	}
	sub GenMHC2_XX112 {
		# 1 = A G
		# 4 = I D 
		# 6 = L 
		# 9 = R D T
		my @p1 = qw (A G);
		my @p4 = qw (I D);
		my $p6 = "L";
		my @p9 = qw (R D T);
		
		my $p1r = $p1[rand(@p1)];
		my $p4r = $p4[rand(@p4)];
		my $p9r = $p9[rand(@p9)];
		my $seq = doNorm().doNorm().doNorm().$p1r.doNorm().doNorm().$p4r.doNorm().$p6.doNorm().doNorm().$p9r.doNorm().doNorm().doNorm();
		
		return $seq;
	}
	sub GenMHC2_XX200 {
		# 1 = A T
		# 3 = S I
		# 5 = Y 
		# 9 = G
		my @p1 = qw (A T);
		my @p3 = qw (S I);
		my $p5 = "Y";
		my $p9 = "G";
		
		my $p1r = $p1[rand(@p1)];
		my $p3r = $p3[rand(@p3)];
		my $seq = doNorm().doNorm().doNorm().$p1r.doNorm().$p3r.doNorm().$p5.doNorm().doNorm().doNorm().$p9.doNorm().doNorm().doNorm();
		
		return $seq;
	}


